visible fn indexOf(self: Array, element: Any): Int {
  let upto = len(self)
  for (var i = 0, i < upto, i++)
    if (self[i] == element) return i
  return -1
}

visible fn contains(self: Array, element: Any): Bool = indexOf(self, element) != -1

visible fn isEmpty(self: Array): Bool = len(self) == 0

fn fillRecursive(flattened: Array, unflattened: Array, fillIndex: Int) {
  for (element in unflattened) {
    if (element is Array) fillRecursive(flattened, element::Array, fillIndex)
    else flattened[fillIndex++] = element
  }
}

fn recursiveLen(self: Array): Int {
  var size = 0
  for (element in self) {
    if (element is Array) size += recursiveLen(element::Array)
    else size++
  }
  return size
}

visible fn flatten(self: Array): Array {
  let flattened = arrayOf<Any>(recursiveLen(self), 0)
  fillRecursive(flattened, self, 0)
  return flattened
}

visible fn size(self: Array): Int = len(self)

visible fn add(self: Array, element: Any): Any {
  let oldSize = len(self)
  let newAlloc = arrayOf<Any>(oldSize + 1, 0)
  for (var i = 0, i < oldSize, i++)
    newAlloc[i] = self[i]
  newAlloc[oldSize] = element
  return newAlloc
}

visible fn removeAt(self: Array, index: Int): Any {
  let oldSize = len(self)
  let newAlloc = arrayOf<Any>(oldSize - 1, 0)
  var j = 0
  for (var i = 0, i < oldSize, i++)
    if (i != index)
      newAlloc[j++] = self[i]
  return newAlloc
}