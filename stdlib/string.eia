stdlib(array)

fn indexOfChar(self: String, letter: Char) {
  let size = len(self)
  if (size == 0) return -1
  for (var i = 0, i < size, i++)
    if (self[i] == letter) return i
  return -1
}

fn indexOf(self: String, piece: String) {
  let selfSize = len(self)
  let pieceSize = len(piece)

  if (pieceSize > selfSize) return false

  for (var i = 0, i < selfSize, i++) {
    if (self[i] == piece[0]) {
      var matched = true
      for (var j = 0, j < pieceSize, j++)
        if (self[j + i] != piece[j])
          matched = false
      if (matched) return i
    }
  }
  return -1
}

fn contains(self: String, piece: String) = indexOf(self, piece) != -1

fn startsWith(self: String, prefix: String): Bool {
  let selfSize = len(self)
  let prefixSize = len(prefix)

  if (prefixSize > selfSize) return false

  for (var i = 0, i < prefixSize, i++)
    if (self[i] != prefix[i])
      return false
  return true
}

fn endsWith(self: String, suffix: String): Bool {
  let selfSize = len(self)
  let suffixSize = len(suffix)

  if (suffixSize > selfSize)
    return false

  let selfLastIndex = selfSize - 1
  let suffixLastIndex = suffixSize - 1

  for (var i = suffixLastIndex, i != 0, i--)
    if (suffix[i] != self[selfLastIndex--])
      return false
  return true
}

let UPPER_CASE = ~{ 'A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M'
                    'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z' }

let LOWER_CASE = ~{ 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm'
                    'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' }

fn invert(self: String, target: Array, replacement: Array) {
  let size = len(self)
  for (var i = 0, i < size, i++) {
    let index = target.indexOf(self[i])
    if (index != -1)
      self[i] = replacement[index]
  }
  println("done!")
}

fn uppercase(self: String) {
  let copy = self + ""
  invert(copy, LOWER_CASE, UPPER_CASE)
  return copy
}