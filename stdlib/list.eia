include(
  static:std:string
)

var list = arralloc(0)
var size = 0
var index = 0

fn init(initSize: Int) {
  list = arralloc(initSize)
  size = initSize
  index = 0
}

fn initArray(array: Array) {
  size = len(array)
  index = 0
  list = array
}

fn enlarge() {
  let newSize = size * 2
  let newList = arralloc(newSize)
  for (var i = 0, i < index, i++) {
    newList[i] = list[i]
  }
  list = newList
  size = newSize
}

fn checkBounds(at: Int) {
  if (0 > at || at >= index) {
    throw format("Index Out of Bounds, index=%d, size=%d", at, index)
  }
}

fn get(at: Int) {
  checkBounds(at)
  := list[at]
}

fn set(element: Any, at: Int) {
  checkBounds(at)
  list[at] = element
}

fn size() = index
fn isEmpty() = size == 0

fn add(element: Any) {
  if (index == size) enlarge()
  list[index++] = element
}

fn addAt(element: Any, at: Int) {
  checkBounds(at)
  let newList = arralloc(size + 1)
  var j = 0
  for (var i = 0, i < size, i++) {
    if (i == at) {
      newList[j++] = element
    }
    newList[j++] = list[i]
  }
  list = newList
  size++
  index++
}

fn indexOf(match: Any) {
  for (var i = 0, i < index, i++) {
    if (list[i] == match) return i
  }
  return -1
}

fn contains(match: Any) = indexOf(match) != -1

fn remove(at: Int) {
  checkBounds(at)
  let element = list[at]
  for (var i = copy(at), i < index - 1, i++) {
    list[i] = list[i + 1]
  }
  index--
  return element
}

fn removeElement(element: Any) {
  let index = indexOf(element)
  if (index == -1) return false
  return remove(index)
}

fn clear() {
  index = 0
}

fn arrayOfRange(from: Int, to: Int) {
  checkBounds(from)
  checkBounds(to)

  let sublistSize = to - from
  let subarray = arralloc(sublistSize)

  for (var i = 0, i < sublistSize, i++) {
    subarray[i] = list[from + i]
  }
  return subarray
}

fn toString() {
  if (size == 0) return "[]"
  var result = "["
  itr (element in list) {
    result += str(element) + ", "
  }
  result = result.part(0, result.size() - 2)
  result += "]"
  return result
}